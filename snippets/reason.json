{
  "Reason Bucklescript global ": {
    "prefix": "rmlbsglobal",
    "body": [
        "[@bs.val] external $bindingToBeCalledInReason: $typeSignature = \"$functionNameOnGlobalScope\""
    ],
    "description": "Reason Bucklescript global "
},
"ReasonML null or undefined type": {
  "prefix": "rmlbsnullundefined",
  "body": [
      "Js.Nullable.t(string)"
  ],
  "description": "ReasonML null or undefined type"
},

  "bs require": {
      "prefix": "rmlreq",
      "body": [
          "[@bs.val] external require: string => string = \"\",",
          "let $1 = require(\"$2\");"
      ],
      "description": "require external javascript package and assing a let binding to it."
  },
  "ReasonReact.string": {
    "prefix": "rmlstr",
    "body": [
        "$1 |> ReasonReact.string"
    ],
    "description": "add `ReasonReact.string` pipe to string in JSX component"
},
"ReasonReact component": {
  "prefix": "rmlcmp",
  "body": [
      "[@react.component]",
      "let make = ($1) => {",
      "  $2",
      "}"
  ],
  "description": "Write basic ReasonML component with JSX 3 syntax"
},
"ReasonReact dom render": {
  "prefix": "rmldomrender",
  "body": [
      "ReactDOMRe.renderToElementWithId(",
      "  <$ComponentName $prop />,",
      "  \"$element\",",
      ");"
  ],
  "description": "ReasonReact dom render"
},

"ReasonReact useReducer": {
  "prefix": "rmlred",
  "body": [
      "let (state, dispatch) = React.useReducer(,",
      "  (state, action) =>",
      "    switch (action) {",
      "      | $1 => { $2 }",
      "    }",
      "  { $3 }",
      ");"
  ],
  "description": "add `useReducer` hook in ReasonReact"
},
"ReasonReact useState": {
  "prefix": "rmlstate",
  "body": [
      "let ($1, set$1) = React.useState(() => $2);"
  ],
  "description": "React.useState hook"
},
"React.useEffect hook": {
  "prefix": "rmleff0",
  "body": [
    "React.useEffect0(() => {",
    "  $sideeffect",
    "});"
  ],
  "description": "React.useEffect hook"
},
"ReasonReact useEffect1": {
  "prefix": "rmleff1",
  "body": [
      "React.useEffect1(",
      "    () => {",
      "      $returnToUnsubscribeOrNone",
      "    },",
      "  [|$dependency|],",
      ");"
  ],
  "description": "ReasonReact useEffect1"
},
"React component default from JS": {
  "prefix": "rmljscmpdefault",
  "body": [
      "[@bs.module \"$1\"][@react.component]",
      "external make: ($2: $3) => React.element = \"default\";"
  ],
  "description": "Bring React component from Js"
},
"React component from JS": {
  "prefix": "rmljscmp",
  "body": [
      "[@bs.module \"$1\"][@react.component]",
      "external make: ($2: $3) => React.element = \"$componentPath\";"
  ],
  "description": "Bring React component from Js"
},
"ReactEvent target": {
  "prefix": "rmleventtarget",
  "body": [
      "e => e->ReactEvent.Form.target##value |> $1"
  ],
  "description": "get form `event.target.value`"
},
"ReasonReact inline style": {
  "prefix": "rmlstyle",
  "body": [
      "let $1 = ReactDOMRe.Style.make($2);"
  ],
  "description": "write inline style"
},
"ReasonApollo http link": {
  "prefix": "rmlgqlhttp",
  "body": [
      "  let httpLink = ApolloLinks.createHttpLink(~uri=\"$uri\", ());"
  ],
  "description": "ReasonApollo http link"
},
"ReasonApollo setup": {
  "prefix": "rmlgqlapollocreate",
  "body": [
      "let inMemoryCache = ApolloInMemoryCache.createInMemoryCache();",
      "",
      "ReasonApollo.createApolloClient(",
      "  ~link,",
      "  ~cache=inMemoryCache,",
      "  (),",
      ");"
  ],
  "description": "ReasonApollo setup"
},
"ReasonReact Apollo split": {
  "prefix": "rmlgqlsplit",
  "body": [
      "let link =",
      "  ApolloLinks.split(",
      "    operation => {",
      "      let operationDefition =",
      "        ApolloUtilities.getMainDefinition(operation##query);",
      "      operationDefition##kind == \"OperationDefinition\"",
      "      &&",
      "      operationDefition##operation == \"subscription\";",
      "    },",
      "    webSocketLink,",
      "    httpLink,",
      "  );"
  ],
  "description": "ReasonReact Apollo split"
},
"ReasonReact websocket": {
  "prefix": "rmlgqlws",
  "body": [
      "  let webSocketLink =",
      "    ApolloLinks.webSocketLink(",
      "      ~uri=\"$wsGraphQLendpointuri\",",
      "      ~reconnect=true,",
      "      (),",
      "    );"
  ],
  "description": "ReasonReact websocket link"
},
"ReasonReact GraphQL gql": {
  "prefix": "rmgql",
  "body": [
      "module $1 = [%graphql",
      "  {|",
      "     $2",
      "  |}",
      "];",
      "",
      "module $1$3 = ReasonApollo.Create$3($1)"
  ],
  "description": "gql for your queries, mutations, subscription"
},
"ReasonReact Render prop": {
  "prefix": "rmlgqlrp",
  "body": [
      "  <$1>",
      "    ...{($2) => {",
      "        $3",
      "      }",
      "    }",
      "  </$1>"
  ],
  "description": "ReasonReact Render prop"
},
"ReasonReact GraphQL mutation fn": {
  "prefix": "rmgqlmut",
  "body": [
      "mutation(~variables=$1##variables,()) |> ignore;"
  ],
  "description": "ReasonReact GraphQL mutation fn"
}
}
